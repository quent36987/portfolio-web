---
interface Props {
  title: string;
  description: string;
  date: string;
  technologies: string[];
  links: {
    site?: string;
    github?: string[];
  };
  objective: string;
  images: string[];
  isPrivate?: boolean;
}

const { title, description, date, technologies, links, objective, images, isPrivate } = Astro.props;
---

<div class="timeline-card group">
  <div class="flex flex-col md:flex-row gap-8 bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden">
    <div class="relative w-full md:w-2/5 h-64 md:h-auto">
      {images.map((image, index) => (
        <img
          src={`/projects/${title.toLowerCase().replace(/ /g, '-')}/${image}`}
          alt={`${title} - ${index + 1}`}
          class="absolute inset-0 w-full h-full object-contain transition-opacity duration-500"
          style={`opacity: ${index === 0 ? '1' : '0'};`}
          data-carousel-item
        />
      ))}
      
      {/* Navigation Arrows */}
      {images.length > 1 && (
        <div class="absolute bottom-4 left-0 right-0 flex justify-between items-center px-4 z-10">
          <button
            class="w-8 h-8 flex items-center justify-center rounded-full bg-white/80 text-gray-800 hover:bg-white transition-colors"
            data-carousel-prev
            aria-label="Image précédente"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          
          <div class="flex space-x-2">
            {images.map((_, index) => (
              <button
                class="w-2 h-2 rounded-full bg-white opacity-50 hover:opacity-100 transition-opacity"
                data-carousel-indicator={index}
                aria-label={`Image ${index + 1}`}
              />
            ))}
          </div>
          
          <button
            class="w-8 h-8 flex items-center justify-center rounded-full bg-white/80 text-gray-800 hover:bg-white transition-colors"
            data-carousel-next
            aria-label="Image suivante"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>
      )}

      {isPrivate && (
        <div class="absolute top-4 right-4 bg-red-500 text-white px-3 py-1 rounded-full text-sm">
          Projet Privé
        </div>
      )}
    </div>
    
    <div class="p-6 md:w-3/5">
      <div class="mb-4">
        <h3 class="text-2xl font-bold text-gray-800 mb-2 group-hover:text-blue-600 transition-colors">
          {title}
        </h3>
        <p class="text-blue-500 font-medium">{date}</p>
      </div>
      
      <p class="text-gray-600 mb-4">{description}</p>
      
      <div class="mb-4">
        <h4 class="font-semibold text-gray-700 mb-2">Objectif</h4>
        <p class="text-gray-600">{objective}</p>
      </div>
      
      <div class="space-y-4">
        <div>
          <h4 class="font-semibold text-gray-700 mb-2">Technologies</h4>
          <div class="flex flex-wrap gap-2">
            {technologies.map((tech) => (
              <span class="px-3 py-1 bg-blue-50 text-blue-600 rounded-full text-sm">
                {tech}
              </span>
            ))}
          </div>
        </div>
        
        {!isPrivate && (
          <div class="flex flex-wrap gap-4">
            {links.site && (
              <a
                href={links.site}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center text-blue-600 hover:text-blue-800"
              >
                <span>Voir le site</span>
                <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
              </a>
            )}
            {links.github && links.github.map((link) => (
              <a
                href={link}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center text-blue-600 hover:text-blue-800"
              >
                <span>GitHub</span>
                <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
              </a>
            ))}
          </div>
        )}
      </div>
    </div>
  </div>
</div>

<script>
  function setupCarousel(card: HTMLElement) {
    const items = card.querySelectorAll('[data-carousel-item]');
    const indicators = card.querySelectorAll('[data-carousel-indicator]');
    const prevButton = card.querySelector('[data-carousel-prev]');
    const nextButton = card.querySelector('[data-carousel-next]');
    let currentIndex = 0;
    let autoplayInterval: number | undefined;

    function showImage(index: number) {
      currentIndex = index;
      items.forEach((item, i) => {
        (item as HTMLElement).style.opacity = i === index ? '1' : '0';
      });
      indicators.forEach((indicator, i) => {
        indicator.classList.toggle('opacity-100', i === index);
        indicator.classList.toggle('opacity-50', i !== index);
      });
    }

    function nextImage() {
      showImage((currentIndex + 1) % items.length);
    }

    function prevImage() {
      showImage((currentIndex - 1 + items.length) % items.length);
    }

    // Setup manual navigation
    prevButton?.addEventListener('click', () => {
      prevImage();
      resetAutoplay();
    });

    nextButton?.addEventListener('click', () => {
      nextImage();
      resetAutoplay();
    });

    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        showImage(index);
        resetAutoplay();
      });
    });

    // Setup autoplay
    function startAutoplay() {
      if (items.length > 1) {
        autoplayInterval = setInterval(nextImage, 5000);
      }
    }

    function resetAutoplay() {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
        startAutoplay();
      }
    }

    // Start autoplay initially
    startAutoplay();

    // Pause autoplay when hovering over the carousel
    card.addEventListener('mouseenter', () => {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
      }
    });

    // Resume autoplay when mouse leaves the carousel
    card.addEventListener('mouseleave', () => {
      startAutoplay();
    });
  }

  document.querySelectorAll('.timeline-card').forEach(card => setupCarousel(card as HTMLElement));
</script>

<style>
  .timeline-card {
    position: relative;
    padding-left: 3rem;
    margin-bottom: 3rem;
  }

  .timeline-card::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: -3rem;
    width: 2px;
    background: linear-gradient(to bottom, #3b82f6 0%, #93c5fd 100%);
  }

  .timeline-card::after {
    content: '';
    position: absolute;
    left: -0.5rem;
    top: 2rem;
    width: 1rem;
    height: 1rem;
    border-radius: 50%;
    background: #3b82f6;
    border: 3px solid #fff;
    box-shadow: 0 0 0 3px #93c5fd;
  }

  .timeline-card:last-child::before {
    display: none;
  }
</style>